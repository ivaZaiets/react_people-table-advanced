{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage.tsx","api.ts","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/PersonLink.tsx","components/TableRow.tsx","components/Loader/Loader.tsx","components/PeoplePage.tsx","components/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["Navbar","isActiveClass","isActive","cn","className","role","to","App","HomePage","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleFilters","setSearchParams","centuries","query","sex","type","placeholder","onChange","event","target","map","century","includes","filter","ct","PersonLink","person","slug","name","TableRow","classNames","born","died","mother","motherName","father","fatherName","Loader","PeoplePage","useState","people","setPeople","loader","setLoader","errorMessage","setErrorMessage","get","getAll","sort","order","useEffect","getPeople","catch","error","finally","peopleFromServer","find","p","String","Number","slice","useParams","normalizedQuery","toLowerCase","trim","filteredPeople","length","value1","value2","localeCompare","reverse","secondClick","thirdClick","NotFoundPage","Root","path","element","index","replace","container","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.120dbda9.chunk.js","sourcesContent":["import cn from 'classnames';\n\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  const isActiveClass = ({ isActive }: { isActive: boolean }) => (\n    cn('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    })\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={isActiveClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={isActiveClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">\n    Home Page\n  </h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\n\nimport cn from 'classnames';\n\nimport { getSearchWith } from '../utils/searchHelper';\n\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  setSearchParams: (value: string) => void,\n\n  searchParams: URLSearchParams,\n  centuries: string[],\n  query: string,\n  sex: string,\n};\n\nexport const PeopleFilters: React.FC<Props> = ({\n  setSearchParams,\n\n  searchParams,\n  centuries,\n  query,\n  sex,\n}) => {\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(getSearchWith(\n      searchParams, { query: event.target.value || null },\n    ));\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={cn({\n            'is-active': sex === '',\n          })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={cn({\n            'is-active': sex === 'm',\n          })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={cn({\n            'is-active': sex === 'f',\n          })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {['16', '17', '18', '19', '20'].map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter((ct: string) => century !== ct)\n                    : [...centuries, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            query: null,\n            sex: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { Link } from 'react-router-dom';\n\nimport cn from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => (\n  <Link\n    className={cn({\n      'has-text-danger': person.sex === 'f',\n    })}\n    to={`../${person.slug}`}\n  >\n    {person.name}\n  </Link>\n);\n","import { Link } from 'react-router-dom';\n\nimport classNames from 'classnames';\nimport { Person } from '../types';\n\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person,\n  slug: string | undefined,\n};\n\nexport const TableRow: React.FC<Props> = ({ person, slug }) => {\n  return (\n    <>\n      <tr\n        data-cy=\"person\"\n        className={classNames({\n          'has-background-warning': slug === person.slug,\n        })}\n      >\n        <td>\n          <Link\n            to={`../${person.slug}`}\n            className={classNames({\n              'has-text-link': person.sex === 'm',\n              'has-text-danger': person.sex === 'f',\n            })}\n          >\n            {person.name}\n          </Link>\n        </td>\n\n        <td>{person.sex}</td>\n        <td>{person.born}</td>\n        <td>{person.died}</td>\n\n        <td>\n          {person.mother ? (\n            <PersonLink person={person.mother} />\n          ) : (\n            person.motherName || '-'\n          )}\n        </td>\n\n        <td>\n          {person.father ? (\n            <PersonLink person={person.father} />\n          ) : (\n            person.fatherName || '-'\n          )}\n        </td>\n      </tr>\n    </>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport cn from 'classnames';\nimport { Person } from '../types';\n\nimport { getPeople } from '../api';\n\nimport { PeopleFilters } from './PeopleFilters';\nimport { TableRow } from './TableRow';\nimport { Loader } from './Loader';\nimport { SearchLink } from './SearchLink';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [loader, setLoader] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  useEffect(() => {\n    setLoader(true);\n    getPeople()\n      .then(setPeople)\n      .catch((error) => {\n        setLoader(false);\n        setErrorMessage('Something went wrong');\n        throw error;\n      })\n      .finally(() => setLoader(false));\n  }, []);\n\n  const peopleFromServer = people.map(person => ({\n    ...person,\n    mother: people.find(p => p.name === person.motherName),\n    father: people.find(p => p.name === person.fatherName),\n    century: String(Number(person.born.toString().slice(0, 2)) + 1),\n  }));\n\n  const { slug } = useParams();\n\n  const normalizedQuery = query.toLowerCase().trim();\n\n  let filteredPeople = peopleFromServer.filter(p => (\n    p.name.toLowerCase().includes(normalizedQuery)\n    || p.motherName?.toLowerCase().includes(normalizedQuery)\n    || p.fatherName?.toLowerCase().includes(normalizedQuery)\n  ));\n\n  if (sex) {\n    filteredPeople = filteredPeople.filter(p => p.sex === sex);\n  }\n\n  if (centuries.length > 0) {\n    filteredPeople = filteredPeople.filter(p => (\n      centuries.includes(p.century)\n    ));\n  }\n\n  switch (sort) {\n    case 'name':\n      filteredPeople.sort((value1, value2) => {\n        return value1.name.localeCompare(value2.name);\n      });\n      break;\n\n    case 'sex':\n      filteredPeople.sort((value1, value2) => {\n        return value1.sex.localeCompare(value2.sex);\n      });\n      break;\n\n    case 'born':\n      filteredPeople.sort((value1, value2) => {\n        return value1.born - value2.born;\n      });\n      break;\n\n    case 'died':\n      filteredPeople.sort((value1, value2) => {\n        return value1.born - value2.born;\n      });\n      break;\n\n    default:\n      return <PeoplePage />;\n  }\n\n  switch (order) {\n    case 'desc':\n      filteredPeople = filteredPeople.reverse();\n      break;\n    default:\n      return <PeoplePage />;\n  }\n\n  const secondClick = sort && order !== 'desc';\n  const thirdClick = sort && order === 'desc';\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      {people.length !== 0 ? (\n        <div className=\"block\">\n          <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters\n                setSearchParams={setSearchParams}\n                searchParams={searchParams}\n                centuries={centuries}\n                query={query}\n                sex={sex}\n              />\n            </div>\n\n            <div className=\"column\">\n              <div className=\"box table-container\">\n                <table\n                  data-cy=\"peopleTable\"\n                  className=\"table is-striped\n                  is-hoverable is-narrow is-fullwidth\"\n                >\n                  <thead>\n                    <tr>\n                      {['Name', 'Sex', 'Born', 'Died'].map(name => (\n                        <th key={name}>\n                          <span className=\"is-flex is-flex-wrap-nowrap\">\n                            {name}\n                            <SearchLink\n                              params={{\n                                sort: thirdClick ? null : name,\n                                order: secondClick ? 'desc' : null,\n                              }}\n                            >\n                              <span className=\"icon\">\n                                <i className={cn('fas', {\n                                  'fa-sort': sort !== name,\n\n                                  'fa-sort-up': sort === name\n                                  && order !== 'desc',\n\n                                  'fa-sort-down': sort === name\n                                  && order === 'desc',\n                                })}\n                                />\n                              </span>\n                            </SearchLink>\n                          </span>\n                        </th>\n                      ))}\n                      <th>Mother</th>\n                      <th>Father</th>\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    {filteredPeople.map(person => (\n                      <TableRow\n                        key={person.slug}\n                        person={person}\n                        slug={slug}\n                      />\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"box table-container\">\n          {errorMessage && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              {errorMessage}\n            </p>\n          )}\n\n          {!loader && people.length === 0 && !errorMessage && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {loader && <Loader />}\n        </div>\n      )}\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">\n    Page not found\n  </h1>\n);\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\n\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"people\">\n            <Route path=\":slug?\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\nconst container = document.getElementById('root') as HTMLDivElement;\n\ncreateRoot(container).render(<Root />);\n"],"sourceRoot":""}